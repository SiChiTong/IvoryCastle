<?xml version="1.0" encoding="UTF-8"?>
<launch>
    <arg name="ns" default="scorpio/mmp0"/>
    <arg name="carto" default="false"/>
    <arg name="slam" default="false"/>

    <!--Load/Spawn robot in real env-->
    <!--Spawn Controller-->
    <rosparam ns="$(arg ns)" command="load" file="$(find ira_factory_robot_controller)/config/scorpio/ros_control/real/controllers.yaml"/>
    <node ns="$(arg ns)" name="diff_controller_spawner" pkg="controller_manager" type="spawner"
      args="joint_state_controller diff_drive_controller"/>

    <!--Main control node-->
    <node ns="$(arg ns)" name="scorpio_base_ros_control" pkg="scorpio_base_ros_control" type="scorpio_base_ros_control"
      output="screen" respawn="false" respawn_delay="3"/>

    <!--Publish robot state-->
    <arg name="x" default="0.4"/>
    <arg name="y" default="0.5"/>
    <arg name="z" default="0.0"/>
    <param name="$(arg ns)/robot_description" command="python $(find xacro)/xacro.py '$(find scorpio_description)/robots/scorpio.urdf.xacro' ns:=$(arg ns)" />
    <node ns="$(arg ns)" name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher">
      <param name="tf_prefix" value="$(arg ns)" />
    </node>

    <!--Laser ros driver-->
    <include ns="$(arg ns)" file="$(find scorpio_bringup)/launch/real/hokuyo.launch">
      <arg name="tf_prefix" value="$(arg ns)"/>
    </include>

    <!--Camera ros driver-->
    <include ns="$(arg ns)" file="$(find realsense2_camera)/launch/rs_camera.launch">
      <arg name="tf_prefix" value="$(arg ns)/base_camera"/>
    </include>

    <!-- correcting the odom -->
    <node ns="$(arg ns)" name="robot_pose_ekf" pkg="robot_pose_ekf" type="robot_pose_ekf">
      <param name="output_frame" value="$(arg ns)/odom" />
      <param name="base_footprint_frame" value="$(arg ns)/base_footprint" />
      <param name="odom_used" value="true" />
      <param name="imu_used" value="false" />
      <param name="vo_used" value="false" />
      <remap from="odom"     to="diff_drive_controller/odom"/>
    </node>

    <group if="$(arg slam)">
      <group unless="$(arg carto)">
        <!-- launch gmapping slam -->
        <node ns="$(arg ns)" name="slam_gmapping" pkg="gmapping" type="slam_gmapping">
          <param name="base_frame" value="$(arg ns)/base_footprint"/>
          <param name="odom_frame" value="$(arg ns)/odom"/>
          <param name="map_frame" value="map"/>
          <param name="delta" value="0.02"/>
          <remap from="scan"                      to="back_scan"/>
          <remap from="map"			                  to="/map"/>
        </node>
      </group>

      <!-- launch Cartographer slam -->
      <group if="$(arg carto)">
        <arg name="lua_filename" default="neuronbot_allcarto.lua"/>
        <arg name="map_filename" default="$(find pmc_gazebo)/map/fusion.bag.pbstream"/>
        <node ns="$(arg ns)" name="cartographer_node" pkg="cartographer_ros"
            type="cartographer_node" args="
                -configuration_directory $(find pmc_application)/config
                -configuration_basename $(arg lua_filename)"
            output="screen">
          <remap from="imu" to="imu" />
          <remap from="scan" to="front_scan" />
        </node>
      </group>
    </group>

    <group unless="$(arg slam)">
      <group unless="$(arg carto)">
        <!-- Load pre-mapped map-->
        <node name="map_server" pkg="map_server" type="map_server" args="$(find pmc_gazebo)/map/lab04_cropped.yaml" />
        <!-- launch amcl localization -->
        <node ns="$(arg ns)" pkg="amcl" type="amcl" name="amcl">
          <param name="use_map_topic"  value="true"/>
          <param name="odom_model_type"  value="diff"/>
          <param name="odom_frame_id"  value="$(arg ns)/odom"/>
          <param name="base_frame_id"  value="$(arg ns)/base_footprint"/>
          <param name="initial_pose_x" value="0.0"/>
          <param name="initial_pose_y" value="0.0"/>
          <param name="initial_pose_a" value="0.0"/>
          <param name="initial_cov_xx"  value="0.1"/>
          <param name="initial_cov_yy"  value="0.1"/>
          <param name="initial_cov_aa"  value="0.0872"/>
          <param name="min_particles"  value="100"/>
          <param name="max_particles"  value="500"/>
          <remap from="map"            to="/map"/>
          <remap from="scan"           to="back_scan"/>
        </node>
      </group>

      <group if="$(arg carto)">
        <!--launch cartographer localization-->
        <arg name="lua_filename_local" default="neuronbot_allcarto_locali.lua"/>
        <arg name="map_filename" default="$(find pmc_gazebo)/map/fusion.bag.pbstream"/>
        <node ns="$(arg ns)" name="cartographer" pkg="cartographer_ros"
            type="cartographer_node" args="
                -configuration_directory $(find pmc_application)/config
                -configuration_basename $(arg lua_filename_local)
                -load_state_filename $(arg map_filename)
                -start_trajectory_with_default_topics=false"
            output="screen">
            <remap from="imu" to="imu" />
            <remap from="scan" to="front_scan" />
        </node>
        <!--launch cartographer grid map transformer-->
        <node ns="$(arg ns)" name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
            type="cartographer_occupancy_grid_node" args="-resolution 0.05">
          <remap from="map" to="/map" />
        </node>
      </group>
    </group>

    <!--vocal output related, offline-->
  	<!--include file="$(find sound_play)/soundplay_node.launch"/>
  	<node name="aiml_tts_soundplay" pkg="ros_aiml" type="aiml_tts_soundplay.py"/-->

  	<!--vocal output related, online-->
  	<!--node name="aiml_tts_google" pkg="ros_aiml" type="aiml_tts_google.py"/-->

    <!--Gui steering console (Optional)-->
    <node ns="$(arg ns)" name="rqt_robot_steering" pkg="rqt_robot_steering" type="rqt_robot_steering">
      <param name="default_topic" value="/$(arg ns)/diff_drive_controller/cmd_vel"/>
      <param name="default_vx_max" value="1.0"/>
      <param name="default_vx_min" value="-1.0"/>
    </node>

    <!-- Gui Rviz   -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find pmc_application)/rviz/sghero_pmc_demo.rviz"/>

</launch>
