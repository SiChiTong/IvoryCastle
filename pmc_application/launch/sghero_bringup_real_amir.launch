<?xml version="1.0" encoding="UTF-8"?>
<launch>
    <arg name="ns" default="scorpio/mmp0"/>
    <arg name="carto" default="true"/>
    <arg name="slam" default="false"/>

    <!--Spawn Robot-->
    <param name="robot_description" command="rosrun xacro xacro.py '$(find scorpio_description)/robots/scorpio.urdf.xacro'" />
    <node pkg="robot_state_publisher" type="robot_state_publisher"  name="robot_state_publisher"/>

    <!--Spawn Controller-->
    <rosparam command="load" file="$(find ira_factory_robot_controller)/config/scorpio/ros_control/real/controllers.yaml"/>
    <node name="scorpio_controller_spawner" pkg="controller_manager" type="spawner"
      args="joint_state_controller
            arm_controller
            diff_drive_controller"/>

    <!--Main control node 8 axis-->
    <node name="scorpio_all_ros_control" pkg="scorpio_arm_ros_control" type="scorpio_arm_ros_control"
      output="screen" respawn="true" respawn_delay="3"/>

    <!--moveit related-->
    <include file="$(find scorpio_moveit_config)/launch/move_group.launch">
      <arg name="allow_trajectory_execution" value="true"/>
      <arg name="fake_execution" value="false"/>
      <arg name="info" value="true"/>
    </include>
    <include file="$(find scorpio_moveit_config)/launch/trajectory_execution.launch.xml"/>
    <include file="$(find scorpio_moveit_config)/launch/moveit_rviz.launch">
      <arg name="config" value="true"/>
    </include>

    <!--Laser ros driver-->
    <include file="$(find scorpio_bringup)/launch/real/hokuyo.launch"/>

    <!--Camera ros driver-->
    <!--include ns="$(arg ns)" file="$(find realsense2_camera)/launch/rs_camera.launch">
      <arg name="tf_prefix" value="$(arg ns)/base_camera"/>
      <arg name="filters"   value="pointcloud"/>
    </include-->
    <include file="$(find realsense2_camera)/launch/rs_rgbd.launch">
      <arg name="tf_prefix" value="base_camera"/>
    </include>

    <!--Gripper driver-->
    <param name="gripper_device" value="/dev/gripper" />
    <node name="gripper_control_server" pkg="robotiq_2f_gripper_control" type="Robotiq2FGripperRtuNode.py"/>
    <node name="gripper_control_client" pkg="robotiq_2f_gripper_control" type="gripper_ser.py"/>

    <group if="$(arg slam)">
      <group unless="$(arg carto)">
	      <param name="diff_drive_controller/base_frame_id" value="base_footprint"/>
        <!--Correcting the odom -->
        <node name="robot_pose_ekf" pkg="robot_pose_ekf" type="robot_pose_ekf">
          <param name="output_frame" value="odom" />
          <param name="base_footprint_frame" value="base_footprint" />
          <param name="odom_used" value="true" />
          <param name="imu_used" value="false" />
          <param name="vo_used" value="false" />
          <remap from="odom"     to="diff_drive_controller/odom"/>
        </node>
        <!-- Launch gmapping slam -->
        <node name="slam_gmapping" pkg="gmapping" type="slam_gmapping">
          <param name="base_frame" value="base_footprint"/>
          <param name="odom_frame" value="odom"/>
          <param name="map_frame" value="map"/>
          <param name="delta" value="0.02"/>
          <remap from="scan"  to="back_scan"/>
          <remap from="map"   to="/map"/>
        </node>
      </group>

      <group if="$(arg carto)">
	      <param name="diff_drive_controller/base_frame_id" value="base_footprint"/>
	      <!-- Launch Cartographer slam -->
        <arg name="lua_filename" default="sghero_allcarto.lua"/>
        <node name="cartographer_node" pkg="cartographer_ros"
            type="cartographer_node" args="
                -configuration_directory $(find pmc_application)/config
                -configuration_basename $(arg lua_filename)"
            output="screen">
          <remap from="imu" to="imu" />
          <remap from="scan" to="front_scan" />
          <remap from="odom"     to="diff_drive_controller/odom"/>
        </node>
        <!--Launch cartographer grid map transformer-->
        <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
            type="cartographer_occupancy_grid_node" args="-resolution 0.05">
          <remap from="map" to="/map" />
        </node>
      </group>
    </group>

    <group unless="$(arg slam)">
      <group unless="$(arg carto)">
	      <param name="diff_drive_controller/base_frame_id" value="base_footprint"/>
        <!--Correcting the odom -->
        <node name="robot_pose_ekf" pkg="robot_pose_ekf" type="robot_pose_ekf">
          <param name="output_frame" value="odom" />
          <param name="base_footprint_frame" value="base_footprint" />
          <param name="odom_used" value="true" />
          <param name="imu_used" value="false" />
          <param name="vo_used" value="false" />
          <remap from="odom"     to="diff_drive_controller/odom"/>
        </node>
        <!-- Load pre-mapped map-->
        <node name="map_server" pkg="map_server" type="map_server" args="$(find pmc_gazebo)/map/lab04_cropped.yaml" />
        <!-- Launch amcl localization -->
        <node pkg="amcl" type="amcl" name="amcl">
          <param name="use_map_topic"  value="true"/>
          <param name="odom_model_type"  value="diff"/>
          <param name="odom_frame_id"  value="odom"/>
          <param name="base_frame_id"  value="base_footprint"/>
          <param name="initial_pose_x" value="0.0"/>
          <param name="initial_pose_y" value="0.0"/>
          <param name="initial_pose_a" value="0.0"/>
          <param name="initial_cov_xx"  value="0.1"/>
          <param name="initial_cov_yy"  value="0.1"/>
          <param name="initial_cov_aa"  value="0.0872"/>
          <param name="min_particles"  value="100"/>
          <param name="max_particles"  value="500"/>
          <remap from="map"            to="/map"/>
          <remap from="scan"           to="back_scan"/>
        </node>
      </group>

      <group if="$(arg carto)">
        <!--Launch cartographer localization-->
	      <param name="diff_drive_controller/base_frame_id" value="base_footprint"/>
        <arg name="lua_filename_local" default="sghero_allcarto_locali.lua"/>
        <arg name="map_filename" default="$(find pmc_gazebo)/map/map.bag.pbstream"/>
        <node name="cartographer" pkg="cartographer_ros"
            type="cartographer_node" args="
                -configuration_directory $(find pmc_application)/config
                -configuration_basename $(arg lua_filename_local)
                -load_state_filename $(arg map_filename)
                -start_trajectory_with_default_topics=false"
            output="screen">
            <remap from="imu" to="imu" />
            <remap from="scan" to="front_scan" />
            <remap from="odom"     to="diff_drive_controller/odom"/>
        </node>
        <!--Launch cartographer grid map transformer-->
        <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
            type="cartographer_occupancy_grid_node" args="-resolution 0.05">
          <remap from="map" to="/map" />
        </node>
      </group>
    </group>

    <!-- four action pose-->
    <rosparam command="load" file="$(find haf_grasping)/config/config.yaml" />
    <node name="calc_grasppoints_svm_action_server" pkg="haf_grasping" type="calc_grasppoints_action_server"/>
    <node name="attack_pose" pkg="arm_plan" type="attack_pose.py"/>
    <node name="pick_place_ser" pkg="arm_plan" type="pick_place_ser.py"/>
    <node name="test_haf_client" pkg="haf_grasping" type="test_haf_client"/>

    <!--Vocal output related, offline-->
    <!--include file="$(find sound_play)/soundplay_node.launch"/>
    <node name="aiml_tts_soundplay" pkg="pmc_assistant" type="aiml_tts_soundplay.py"/-->

    <!--Vocal output related, online-->
    <node name="aiml_tts_google" pkg="pmc_assistant" type="aiml_tts_google.py"/>

    <!--Assistant related-->
    <param name="aiml_path" value="$(find pmc_assistant)/data" />
    <node name="aiml_server" pkg="pmc_assistant" type="aiml_server.py" output="screen"/>

    <!--navigation related-->
    <node name="tfServer" pkg="ira_factory_state_machine" type="tfServer.py"/>
    <node name="Tnavigation_real_dynamic" pkg="pmc_navigation" type="Tnavigation_real_dynamic.py" args="$(arg ns)"/>
    <node pkg="leg_detector" type="leg_detector" name="leg_detector" args="scan:=front_scan $(find leg_detector)/config/trained_leg_detector.yaml"/>
    <node pkg="leg_detector" type="leg_detector2" name="leg_detector2" args="scan:=back_scan $(find leg_detector)/config/trained_leg_detector.yaml"/>
    <node name="humancaution" pkg="pmc_navigation" type="humancaution.py" args="$(arg ns)"/>
    <node name="humancaution_chatter" pkg="pmc_navigation" type="humancaution_chatter.py"/>

    <!--Gui steering console (Optional)-->
    <node name="rqt_robot_steering" pkg="rqt_robot_steering" type="rqt_robot_steering">
      <param name="default_topic" value="/diff_drive_controller/cmd_vel"/>
      <param name="default_vx_max" value="1.0"/>
      <param name="default_vx_min" value="-1.0"/>
    </node>

    <!-- Gui Rviz   -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find pmc_application)/rviz/sghero_pmc_demo.rviz"/>

    <!-- Gui arm -->
    <node name="rqt_joint_trajectory_controller" pkg="rqt_joint_trajectory_controller" type="rqt_joint_trajectory_controller"/>

</launch>
